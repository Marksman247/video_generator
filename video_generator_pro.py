# Built by MAX — Smart MP4 Race Video Generator Pro Edition ✅

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from moviepy.editor import ImageSequenceClip
from PIL import Image
import numpy as np
import io
import os

st.title("📊 Pro Data Race Video Generator by MAX")

def generate_frames(df_pivot, top_n, font_size, resolution, palette, title, subtitle, show_values):
    frames = []
    years = df_pivot.index.tolist()
    dpi, figsize = (128, (16, 9)) if resolution == "720p" else (192, (19.2, 10.8))

    for year in years:
        data = df_pivot.loc[year].sort_values(ascending=False).head(top_n)
        fig, ax = plt.subplots(figsize=figsize)
        cmap = plt.get_cmap(palette)
        colors = cmap(np.linspace(0.2, 0.8, len(data)))
        bars = data.plot(kind='barh', ax=ax, color=colors, edgecolor='black')

        ax.set_title(f"{title}\n{subtitle}\nTop {top_n} - {year:.2f}", fontsize=font_size+4)
        ax.set_xlabel('Value', fontsize=font_size)
        ax.set_ylabel('Item', fontsize=font_size)

        if show_values:
            for container in ax.containers:
                ax.bar_label(container, fmt='%.0f', fontsize=font_size-2, label_type='edge')

        plt.tight_layout()
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=dpi)
        buf.seek(0)
        frames.append(buf)
        plt.close()

    return frames

def save_video(frames, output_path, fps, pause_last_frame):
    image_arrays = []
    for f in frames:
        img = Image.open(f)
        img_array = np.array(img)
        image_arrays.append(img_array)
    for _ in range(pause_last_frame * fps):
        image_arrays.append(image_arrays[-1])

    final_clip = ImageSequenceClip(image_arrays, fps=fps)
    final_clip.write_videofile(output_path, codec="libx264")

def generate_video(df, year_col, name_col, value_col, top_n, font_size, resolution, fps, palette, title, subtitle, show_values, pause_last_frame):
    try:
        df[year_col] = pd.to_numeric(df[year_col], errors='coerce')
        df[value_col] = pd.to_numeric(df[value_col], errors='coerce')
        df.dropna(subset=[year_col, value_col], inplace=True)

        df_pivot = df.pivot(index=year_col, columns=name_col, values=value_col).fillna(0)
        if df_pivot.empty:
            st.error("CSV contains no usable data after pivoting.")
            return None

        n_frames_per_year = 10
        years = df_pivot.index.tolist()
        new_years = []

        for i in range(len(years) - 1):
            start_year = years[i]
            end_year = years[i + 1]
            step = (end_year - start_year) / n_frames_per_year
            for j in range(n_frames_per_year):
                new_years.append(start_year + j * step)
        new_years.append(years[-1])

        df_pivot_interp = df_pivot.reindex(df_pivot.index.union(new_years))
        df_pivot_interp = df_pivot_interp.interpolate(method='linear').sort_index()

        st.write(f"📊 Total frames after interpolation: {len(df_pivot_interp.index)}")

        frames = generate_frames(df_pivot_interp, top_n, font_size, resolution, palette, title, subtitle, show_values)
        video_path = 'output_video_pro.mp4'
        save_video(frames, video_path, fps, pause_last_frame)
        return video_path

    except Exception as e:
        st.error(f"❌ Error: {e}")
        return None

# UI Inputs
csv_file = st.file_uploader("📁 Upload CSV Dataset", type=["csv"])

if csv_file:
    try:
        df = pd.read_csv(csv_file)
        if df.empty or df.columns.empty:
            st.error("❌ CSV file has no data or columns.")
        else:
            st.success("✅ CSV uploaded successfully!")
            columns = df.columns.tolist()

            year_col = st.selectbox("📅 Select Year Column", columns)
            name_col = st.selectbox("🏷️ Select Item Name Column", columns)
            value_col = st.selectbox("💲 Select Value Column", columns)

            top_n = st.slider("🔢 Number of Bars to Display", 2, 20, 5)
            font_size = st.slider("🔠 Font Size", 12, 36, 16)
            fps = st.slider("🎞️ Frames Per Second", 1, 30, 5)
            resolution = st.radio("🖥️ Video Resolution", ["720p", "1080p"], index=0)
            palette = st.selectbox("🎨 Select Color Palette", ["plasma", "viridis", "inferno", "magma", "cividis", "Greens", "Blues"])
            title = st.text_input("📝 Video Title", "My Data Race Animation")
            subtitle = st.text_input("💬 Video Subtitle", "Generated by MAX")
            show_values = st.checkbox("🔢 Show Value Labels on Bars", value=True)
            pause_last_frame = st.slider("⏸️ Hold Final Frame (seconds)", 0, 5, 2)

            if st.button("🎥 Generate MP4 Video"):
                st.info("🚀 Starting video generation...")
                video_path = generate_video(df, year_col, name_col, value_col, top_n, font_size, resolution, fps, palette, title, subtitle, show_values, pause_last_frame)

                if video_path and os.path.exists(video_path):
                    st.success("✅ MP4 Video generated successfully!")
                    st.video(video_path)
                    with open(video_path, "rb") as f:
                        st.download_button("⬇️ Download Video", f, file_name=video_path)
                else:
                    st.error("❌ Failed to generate video.")
    except Exception as e:
        st.error(f"❌ Failed to load CSV: {e}")
else:
    st.info("📁 Please upload a CSV file to begin.")
